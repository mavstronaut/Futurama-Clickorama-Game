{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","rightWrong","score","topScore","Wrapper","children","Title","Container","fluid","Row","Column","size","split","map","join","App","state","friends","currentScore","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","shuffleFriends","this","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d08a0e0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n    <div className=\"card\" value={props.id} onClick={() => props.handleClick(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\n\nexport default FriendCard;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n    <nav>\n        <ul>\n            <li className=\"brand animated lightSpeenIn\">\n                <a href=\"/clicky-game/\">{props.title}</a>\n            </li>\n\n            <li id=\"rw\">{props.rightWrong}</li>\n\n            <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n            <li id=\"top-sco\">Top Score: {props.topScore}</li>\n        </ul>\n    </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\"\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\n\nconst Container = props =>\n    <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n        {props.children}\n    </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n    <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n        {props.children}\n    </div>;\n\nexport default Row;","import React from \"react\";\n\nconst Column = props => {\n    const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n    return (\n        <div className={size}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Column;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport friends from \"./friends.json\";\nimport \"./App.css\"\n\nfunction shuffleFriends(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: []\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (newScore === 24) {\n      this.setState({ rightWrong: \"You Win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"Good News!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = shuffleFriends(friends);\n    this.setState({ friends: shuffledFriends });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Futurama Clicky Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n          Click each character, but don't touch them twice or you'll be subjected to Brannigan's Law.\n        </Title>\n\n        <Container>\n          <Row>\n            {this.state.friends.map(friend => (\n              <Column size=\"md-3 sm-6\">\n                <FriendCard\n                  key={friend.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friend.id}\n                  image={friend.image}\n                  />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}